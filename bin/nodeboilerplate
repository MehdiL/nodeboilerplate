#!/usr/bin/env node

/**
 * Module dependencies.
 */

var fs = require('fs');

/**
 * Framework version.
 */

var version = '0.0.1';

/**
 * Usage documentation.
 */

var usage = ''
  + '\n'
  + '  Usage: nodeboilerplate [options] [path]\n'
  + '\n'
  + '  Options:\n'
  + '    -v, --version                    output framework version\n'
  + '    -h, --help                       output help information\n'
  + '    -t, --template [mustache|jqtpl]  specify template language, (default: mustache)\n'
  ;

// Parse arguments

var args = process.argv.slice(2)
  , path = '.'
  , application = 'boilerplate-mustache';

while (args.length) {
  var arg = args.shift();
  switch (arg) {
    case '-h':
    case '--help':
      abort(usage);
      break;
    case '-v':
    case '--version':
      abort(version);
      break;
    case '-t':
    case '--template':
      arg = args.shift();
      switch (arg) {
        // default: boilerplate-mustache
        case 'jqtpl':
          application = 'boilerplate-jqtpl';
          break;
      }
      break;
    default:
      path = arg;
  }
}

// Generate application

(function createApplication(path, application) {
  emptyDirectory(path, function(empty){
    if (empty) {
      createApplicationAt(path, application);
    } else {
      confirm('destination is not empty, continue? ', function(ok){
        if (ok) {
          process.stdin.destroy();
          createApplicationAt(path, application);
        } else {
          abort('aborting');
        }
      });
    }
  });
})(path, application);

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 * @param {String} application
 */

function createApplicationAt(path, application) {
  console.log();
  process.on('exit', function(){
    console.log();
    console.log('   dont forget to install dependencies:');
    console.log('     $ cd %s && npm install', path);
    console.log();
    console.log('   run the app:');
    console.log('     $ node app');
    console.log();
  });

    console.log(__dirname + '/../' + application);

  copyDir(__dirname + '/../' + application, path);
}

/**
 * Check if the given directory `path` is empty.
 *
 * @param {String} path
 * @param {Function} fn
 */

function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Cp directory
 *
 * @param {String} source
 * @param {String} destination
 */

function copyDir(src, dest) {
  fs.readdir(src, function (err, files) {
    for (var i = 0; i < files.length; i += 1) {
      (function (file) {
        var fileSrc = src + '/' + file
          , fileDest = dest + '/' + file;
        fs.stat(fileSrc, function (err, stats) {
          if (stats.isDirectory()) {
            mkdir(fileDest, function () {
              copyDir(fileSrc, fileDest);
            });
          } else if (stats.isFile()) {
            copy(fileSrc, fileDest);
          };
        });
      }(files[i]));
    }
  });
}

/**
 * Cp
 *
 * @param {String} source
 * @param {String} destination
 */

function copy(src, dest) {
    fs.readFile(src, 'utf8', function (err, data) {
        write(dest, data);
    });
}

/**
 * Mkdir
 *
 * @param {String} path
 * @param {Function} fn
 */

function mkdir(path, fn) {
    fs.mkdir(path, 0755, function(){
        console.log('   \033[36mcreate\033[0m : ' + path);
        fn && fn();
    });
}

/**
 * echo str > path.
 *
 * @param {String} path
 * @param {String} str
 */

function write(path, str) {
  fs.writeFile(path, str);
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

/**
 * Prompt confirmation with the given `msg`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function confirm(msg, fn) {
  prompt(msg, function(val){
    fn(/^ *y(es)?/i.test(val));
  });
}

/**
 * Prompt input with the given `msg` and callback `fn`.
 *
 * @param {String} msg
 * @param {Function} fn
 */

function prompt(msg, fn) {
  // prompt
  if (' ' == msg[msg.length - 1]) {
    process.stdout.write(msg);
  } else {
    console.log(msg);
  }

  // stdin
  process.stdin.setEncoding('ascii');
  process.stdin.once('data', function(data){
    fn(data);
  }).resume();
}

/**
 * Exit with the given `str`.
 *
 * @param {String} str
 */

function abort(str) {
  console.error(str);
  process.exit(1);
}
